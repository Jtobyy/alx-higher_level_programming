----------------------------------------------
How to use 2-matrix_divided.py and tests cases
----------------------------------------------

	usage: matrix_divided(matrix, 3)
	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
	>>> matrix = [[1, 2, 3], [4, 5, 6]]
	>>> print(matrix_divided(matrix, 3))
	[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]
	
	matrix_divided should have returned a new matrix
	>>> print(matrix)
	[[1, 2, 3], [4, 5, 6]]
	
	If matrix is not a list TypeError
	is raised with a message
	>>> matrix_divided(8, 8) #doctest: +NORMALIZE_WHITESPACE
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	...
	If matrix is not a list of lists, TypeError
	is raised with a message
	>>> matrix_divided([3, [3, 4], 8], 4)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	...
	If rows are of different sizes, TypeError
	is raised with a message
	>>> matrix_divided([[3, 4], [8, 8, 9]], 4)
	Traceback (most recent call last):
	TypeError: Each row of the matrix must have the same size

	...
	If div is not an integer or a float, TypeError
	is raised with a message
	>>> matrix_divided([[3, 4], [1, 8]], 'u')
	Traceback (most recent call last):
	TypeError: div must be a number

	...
	If div is zero, ZeroDivisionError
	is raised with a message
	>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 0)
	Traceback (most recent call last):
	ZeroDivisionError: division by zero

	>>> matrix_divided()
	Traceback (most recent call last):
	TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'
	
	...
